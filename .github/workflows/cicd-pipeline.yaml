name: CI/CD Pipeline

on:
  push:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  derive-tf-versions:
    uses: ./.github/workflows/derive-tf-version.yaml
  get-metadata:
    name: Get meta data
    runs-on: ubuntu-latest
    outputs:
      build_datetime: ${{ steps.metadata.outputs.build_datetime }}
      build_timestamp: ${{ steps.metadata.outputs.build_timestamp }}
      build_epoch: ${{ steps.metadata.outputs.build_epoch }}
      nodejs_version: ${{ steps.metadata.outputs.nodejs_version }}
      python_version: ${{ steps.metadata.outputs.python_version }}
      terraform_version: ${{ steps.metadata.outputs.terraform_version }}
    steps:
      - id: metadata
        run: |
          datetime=$(date -u +'%Y-%m-%dT%H:%M:%S%z')
          echo "build_datetime=$datetime" >> $GITHUB_OUTPUT
          echo "build_timestamp=$(date --date=$datetime -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          echo "build_epoch=$(date --date=$datetime -u +'%s')" >> $GITHUB_OUTPUT
          echo "nodejs_version=$(grep nodejs .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "python_version=$(grep python .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "terraform_version=$(grep terraform .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
  scan-secrets:
    name: Scan code for secrets
    uses: ./.github/workflows/scan-secrets.yaml
  check-file-format:
    name: Check general formatting
    uses: ./.github/workflows/check-file-format.yaml
  check-markdown-format:
    name: Check format of markdown files
    uses: ./.github/workflows/check-markdown-format.yaml
  check-terraform-format:
    name: Check format of terraform code
    uses: ./.github/workflows/check-terraform-format.yaml
  validate-terraform:
    name: Validate terraform code
    uses: ./.github/workflows/validate-terraform.yaml
    needs: derive-tf-versions
    with:
      ENV: dev
    secrets: inherit
  check-python-black-format:
    name: Check format of python code (black)
    uses: ./.github/workflows/check-python-black-format.yaml
  check-python-flake-rules:
    name: Check python code quality (flake)
    uses: ./.github/workflows/check-python-flake-rules.yaml
  cloc-repository:
    name: Count lines of code
    uses: ./.github/workflows/cloc-repository.yaml
  scan-dependencies:
    name: Scan dependencies
    uses: ./.github/workflows/scan-dependencies.yaml
  cicd-pipeline-test:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs:
      [
        get-metadata,
        scan-secrets,
        check-file-format,
        check-markdown-format,
        check-terraform-format,
        check-python-black-format,
        check-python-flake-rules,
        cloc-repository,
        scan-dependencies,
      ]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: List Variables
        run: |
          export BUILD_DATETIME="${{ needs.get-metadata.outputs.build_datetime }}"
          export BUILD_TIMESTAMP="${{ needs.get-metadata.outputs.build_timestamp }}"
          export BUILD_EPOCH="${{ needs.get-metadata.outputs.build_epoch }}"
          export NODEJS_VERSION="${{ needs.get-metadata.outputs.nodejs_version }}"
          export PYTHON_VERSION="${{ needs.get-metadata.outputs.python_version }}"
          export TERRAFORM_VERSION="${{ needs.get-metadata.outputs.terraform_version }}"
          make list-variables
      # - name: Run Tests ...
      #   run: |
      #     ?
  deploy-service-management-domain:
    name: Set up environment
    uses: ./.github/workflows/deploy-service-management-domain.yaml
    needs: derive-tf-versions
    with:
      github_environment: dev
      stack: application
      action: plan
      tf_vers: ${{needs.derive-tf-versions.outputs.maxVersion}}
    secrets: inherit
